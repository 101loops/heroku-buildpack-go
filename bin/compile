#!/bin/sh
# usage: bin/compile <build-dir> <cache-dir>

set -e

mkdir -p "$1" "$2"
build=$(cd "$1/" && pwd)
cache=$(cd "$2/" && pwd)
name=$(cat $build/hack-appname)
ver=release.r60.3
if test -f $build/hack-goversion
then ver=$(cat $build/hack-goversion)
fi

gogetinst() {
    go get "$1"
    go install "$1"
}

if test "$ver" '<' weekly.2012-02-14
then GOINSTALL=goinstall
else GOINSTALL=gogetinst
fi

echo "-----> Using Go $ver"

(
    set -e

    # Already cached?
    test -d $cache/go-$ver/go && exit

    rm -rf $cache/* # be sure not to build up cruft
    mkdir -p $cache/go-$ver
    cd $cache/go-$ver
    echo "-----> Fetching Go $ver"
    url=https://s3.amazonaws.com/golang/go-$ver.tar.gz
    curl -sO $url
    tar zxf go-$ver.tar.gz
    rm -f go-$ver.tar.gz
)

GOROOT=$cache/go-$ver/go export GOROOT
GOPATH=$build/.heroku/g export GOPATH
PATH=$GOROOT/bin:$PATH

p=$GOPATH/src/$name
mkdir -p $p
cp -R $build/* $p

unset GIT_DIR # unset git dir or it will mess with goinstall
echo "-----> Running goinstall"
for f in $(find $p -type f -name '*.go')
do $GOINSTALL $(dirname $f)
done

mkdir -p $build/bin
mv $GOPATH/bin/* $build/bin
rm -rf $build/.heroku
