#!/bin/bash
# usage: bin/compile <build-dir> <cache-dir>

# fail fast
set -eo pipefail

echo $(pwd)
ls -la


#--------------------------------------------------------------------
# Variables
#--------------------------------------------------------------------

mkdir -p "$1" "$2"
BUILD=$(cd "$1/" && pwd)
CACHE=$(cd "$2/" && pwd)
BUILDPACK=$(dirname $(dirname $0))

# Go
GO_VERSION=${GO_VERSION:-1.1.2}
GO_FILE=${GO_FILE:-go$GO_VERSION.$(uname|tr A-Z a-z)-amd64.tar.gz}
GO_URL=${GO_URL:-http://go.googlecode.com/files/$GO_FILE}

# Python
venv=$CACHE/venv				# Virtualenv cache
mkdir -p $CACHE/pip			# pip cache
python=python2.7				# The Python we use for Go dependencies
PATH=$venv/bin:$PATH


#--------------------------------------------------------------------
# Virtualenv for Go dependencies
#--------------------------------------------------------------------

virtualenv() {
    python "$$BUILDPACK/vendor/virtualenv-1.7/virtualenv.py" "$@"
}

if test -e $BUILD/bin && ! test -d $BUILD/bin
then
    echo >&2 " !     File bin exists and is not a directory."
    exit 1
fi


#--------------------------------------------------------------------
# Install (or use cached) Go
#--------------------------------------------------------------------

if test -d $CACHE/go-$ver/go
then
    echo "-----> Using Go $ver"
else
    rm -rf $CACHE/* # be sure not to build up cruft
    mkdir -p $CACHE/go-$ver
    cd $CACHE/go-$ver
    echo -n "-----> Installing Go $ver..."
    curl -sO $GO_URL
    tar zxf $GO_FILE
    rm -f $GO_FILE
    echo " done"
fi


#--------------------------------------------------------------------
# Configure Go
#--------------------------------------------------------------------

GOROOT=$CACHE/go-$ver/go
export GOROOT

echo $GOROOT

GO_PATH="${GO_PATH:-\$BUILD}"
echo $GO_PATH
eval GOPATH=$GO_PATH
echo $GOPATH
export GOPATH

echo $GOPATH

PATH=$GOROOT/bin:$PATH

echo $PATH

echo $(pwd)
ls -la


#--------------------------------------------------------------------
# Dependencies for Go
#--------------------------------------------------------------------

if ! (which hg > /dev/null && which bzr > /dev/null)
then
    echo -n "       Installing Virtualenv..."
    virtualenv --python $python --distribute --never-download --prompt='(venv) ' $venv > /dev/null 2>&1
    . $venv/bin/activate > /dev/null 2>&1
    echo " done"

    echo -n "       Installing Mercurial..."
    pip install --use-mirrors mercurial > /dev/null 2>&1
    echo " done"

    echo -n "       Installing Bazaar..."
    pip install --use-mirrors bzr > /dev/null 2>&1
    echo " done"
fi

echo $(pwd)
ls -la

# optional: move source to named directory path
GO_DIR=$BUILD
#GO_DIR_NAME=$(GO_DIR)
#if [ -n "$GO_DIR_name" ]
#	GO_DIR=GO_DIR/src/GO_DIR_NAME
#	mkdir -p $GO_DIR
#	cp -R $BUILD/* $GO_DIR
#fi

echo $(pwd)
ls -la


#--------------------------------------------------------------------
# Compile!
#--------------------------------------------------------------------

unset GIT_DIR 	# unset git dir or it will mess with goinstall

echo "-----> Running: go get -tags heroku ./..."
cd $GO_DIR
echo $(pwd)
ls -la
go get -tags heroku ./...

echo $(pwd)
ls -la


#--------------------------------------------------------------------
# Move the binaries so we can use them
#--------------------------------------------------------------------

#mkdir -p $BUILD/bin
#mv $GO_DIR/* $BUILD/bin
#rm -rf $BUILD/.heroku

#echo $(pwd)
#ls -la

mkdir -p $BUILD/.profile.d
echo 'PATH=$PATH:$HOME/bin' > $BUILD/.profile.d/go.sh

echo $(pwd)
ls -la
