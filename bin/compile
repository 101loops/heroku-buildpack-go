#!/bin/bash
# usage: bin/compile <build-dir> <cache-dir>

# fail fast
set -eo pipefail

echo $(pwd)
ls -la


#--------------------------------------------------------------------
# Variables for use later
#--------------------------------------------------------------------

mkdir -p "$1" "$2"
build=$(cd "$1/" && pwd)
cache=$(cd "$2/" && pwd)
buildpack=$(dirname $(dirname $0))

# Go
ver=${GO_VERSION:-1.1.2}
file=${GO_FILE:-go$ver.$(uname|tr A-Z a-z)-amd64.tar.gz}
url=${GO_URL:-http://go.googlecode.com/files/$file}

# Python
venv=$cache/venv				# Virtualenv cache
mkdir -p $cache/pip			# pip cache
python=python2.7				# The Python we use for Go dependencies
PATH=$venv/bin:$PATH


#--------------------------------------------------------------------
# Virtualenv for Go dependencies
#--------------------------------------------------------------------

virtualenv() {
    python "$buildpack/vendor/virtualenv-1.7/virtualenv.py" "$@"
}

if test -e $build/bin && ! test -d $build/bin
then
    echo >&2 " !     File bin exists and is not a directory."
    exit 1
fi


#--------------------------------------------------------------------
# Install (or use cached) Go
#--------------------------------------------------------------------

if test -d $cache/go-$ver/go
then
    echo "-----> Using Go $ver"
else
    rm -rf $cache/* # be sure not to build up cruft
    mkdir -p $cache/go-$ver
    cd $cache/go-$ver
    echo -n "-----> Installing Go $ver..."
    curl -sO $url
    tar zxf $file
    rm -f $file
    echo " done"
fi


#--------------------------------------------------------------------
# Configure Go
#--------------------------------------------------------------------

GOROOT=$cache/go-$ver/go
export GOROOT

echo $GOROOT

GOPATH=${GO_PATH:-$build/.heroku/g}
export GOPATH

echo $GOPATH

PATH=$GOROOT/bin:$PATH

echo $PATH

echo $(pwd)
ls -la


#--------------------------------------------------------------------
# Dependencies for Go
#--------------------------------------------------------------------

if ! (which hg > /dev/null && which bzr > /dev/null)
then
    echo -n "       Installing Virtualenv..."
    virtualenv --python $python --distribute --never-download --prompt='(venv) ' $venv > /dev/null 2>&1
    . $venv/bin/activate > /dev/null 2>&1
    echo " done"

    echo -n "       Installing Mercurial..."
    pip install --use-mirrors mercurial > /dev/null 2>&1
    echo " done"

    echo -n "       Installing Bazaar..."
    pip install --use-mirrors bzr > /dev/null 2>&1
    echo " done"
fi

echo $(pwd)
ls -la

# optional: move source to named directory path
go_dir=$build
#go_dir_name=$(GO_DIR)
#if [ -n "$go_dir_name" ]
#	go_dir=go_dir/src/$go_dir_name
#	mkdir -p $go_dir
#	cp -R $build/* $go_dir
#fi

echo $(pwd)
ls -la

ls $build/.heroku -la

#--------------------------------------------------------------------
# Compile!
#--------------------------------------------------------------------

unset GIT_DIR 	# unset git dir or it will mess with goinstall

echo "-----> Running: go get -tags heroku ./..."
cd $go_dir
echo $(pwd)
ls -la
go get -tags heroku ./...

echo $(pwd)
ls -la


#--------------------------------------------------------------------
# Move the binaries so we can use them
#--------------------------------------------------------------------

mkdir -p $build/bin
mv $go_dir/* $build/bin
#rm -rf $build/.heroku

echo $(pwd)
ls -la

mkdir -p $build/.profile.d
echo 'PATH=$PATH:$HOME/bin' > $build/.profile.d/go.sh

echo $(pwd)
ls -la
